pipeline {
    agent any
    options { 
        timestamps()
        ansiColor('xterm')
    }
    parameters {
        booleanParam(name: 'DEPLOY', defaultValue: true, description: '')
        string(name: 'BRANCH_PORTAL_CLIENT', defaultValue: 'origin/integration', description: '')
        extendedChoice(defaultValue: '-ALL-', description: 'ListOfLambdas', multiSelectDelimiter: ',', name: 'LAMBDAS', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_MULTI_SELECT', value: '-ALL-,LambdaFolder1,LambdaFolder2,LambdaFolder3,LambdaFolder4,LambdaFolder5,LambdaFolder6,LambdaFolder7,LambdaFolder8,LambdaFolder9,LambdaFolder10,LambdaFolder11,LambdaFolder12,LambdaFolder13,LambdaFolder14,LambdaFolder15,LambdaFolder16,LambdaFolder17,LambdaFolder18,LambdaFolder19,LambdaFolder20', visibleItemCount: 20)
    }
    stages {
        stage("Prepare Workspace") {
            steps {
                script {
                    cleanWs()
                    deleteDir()
                    checkout scm
                    def APP_BASE_VER = env.APP_BASE_VER
                    def buildNumber = "${APP_BASE_VER}.${BUILD_NUMBER}"
                    currentBuild.displayName = "TestPipeline (${buildNumber})"
                  
                    def repoInfo = [
                    //    "/"		:	[ 'url': 'https://github.com/hliu168/CloudNativeP4.git', 'branch': "master" ],
                        "web"   :   [ 'url': 'https://github.com/hliu168/web.git',  'branch': "master"] 
                    ]
                    
                    def stepsForParallel = [:]
                    repoInfo.each { repoName, repoUrl ->
                        stepsForParallel[repoName] = { ->
                            dir("${repoName}") {
                                checkout([$class: 'GitSCM',
                                          branches: [[name: repoUrl['branch'] ]],
                                          //extensions: [[$class: 'LocalBranch', localBranch: "**"]],
                                          userRemoteConfigs: [[ /*credentialsId: "${credScm}", */url: repoUrl['url']]]])
                            }
                        }
                        echo "${repoUrl} checked out to ${WORKSPACE}/${repoName}/ "
                    }
                    // Run all checkoutsin parallel
                    parallel stepsForParallel
                }
            }
        }
        stage("Build") {
            steps {
                 script {
                 	def lambdasList = "$LAMBDAS".split(",")
                 	for (item in lambdasList) {
                 		if ("${item}" == "-ALL-") {
                 			lambdasList = 'LambdaFolder1,LambdaFolder2,LambdaFolder3,LambdaFolder4,LambdaFolder5,LambdaFolder6,LambdaFolder7,LambdaFolder8,LambdaFolder9,LambdaFolder10,LambdaFolder11,LambdaFolder12,LambdaFolder13,LambdaFolder14,LambdaFolder15,LambdaFolder16,LambdaFolder17,LambdaFolder18,LambdaFolder19,LambdaFolder20'.split(",")
                 			break
                 		}
                 	}
                 	
                 	
                    nodejs(nodeJSInstallationName: "16.5.0") {
						def steps = [:]
	                 	lambdasList.each {lambda->
							steps[lambda] = {
								sh '''#!/bin/bash
			                        set -eu
			                        
			                        npm -v
			                        
			                        echo ''' +lambda+ '''
			                    '''
							}                 		
	                 	}
	                 	parallel steps
                    }               
                }
            }
        }
        stage ("Deploying") {
             when {
                allOf {
          //          branch 'master'
                    expression { params.DEPLOY == true }
                }
            }
            steps {
                echo 'Deploying'
            }
        } 
    }
    post {
        success {
//            script {
//                 def lambdas = "${LAMBDAS}".split(",")
//                 def artifactList = []
//                 lambdas.each {l->
//                     echo "$l"
//                     def artifactName = sh(script: "cat $l/package.json | jq -r '.name'", returnStdout: true)
//                     echo "$artifactName"
//                     artifactList.add(artifactName.trim())
//                 }
                
//                 def artifactString = artifactList.join(",")
//                 echo "$artifactString"

//                def APP_BASE_VER = env.APP_BASE_VER
//                build job: 'DownStreamJob', parameters: [
//                   string(name: 'BRANCH_PORTAL_CLIENT', value: params.BRANCH_PORTAL_CLIENT),
//                    string(name: 'AGENT_VERSION', value: "${APP_BASE_VER}.${BUILD_NUMBER}"),
//                    string(name: 'PORTAL_ENV', value: 'integ'),
//                    string(name: 'ARTIFACT_LIST', value: "$LAMBDAS")
//                ], wait: false
				
//            }
	            echo "++++++++++++++++++++++++Success in Build++++++++++++++++++++++++"
        }
        failure {
            echo "++++++++++++++++++++++++Failure in Build++++++++++++++++++++++++"
        }
    }
}
